'use client'

import React, { useState, useEffect } from 'react'
import { TrendingUp, Target, Award, Zap, Star } from 'lucide-react'

interface MonthlyProgressBarProps {
  paid: number
  total: number
  className?: string
}

// Definici√≥n de rangos de progreso con mensajes motivacionales
const PROGRESS_RANGES = {
  // 0-20%: Necesita motivaci√≥n inicial
  '0-20': {
    color: 'from-red-400 to-orange-400',
    bgColor: 'bg-red-50',
    borderColor: 'border-red-200',
    icon: Target,
    messages: [
      "¬°Cada paso cuenta! üöÄ",
      "¬°Empieza con fuerza! üí™",
      "¬°El primer paso es el m√°s importante! üå±",
      "¬°Vamos a construir algo incre√≠ble! üèóÔ∏è",
      "¬°Cada peso cuenta para tu futuro! üí∞"
    ]
  },
  // 21-40%: Progreso inicial
  '21-40': {
    color: 'from-orange-400 to-yellow-400',
    bgColor: 'bg-orange-50',
    borderColor: 'border-orange-200',
    icon: TrendingUp,
    messages: [
      "¬°Ya est√°s en movimiento! üìà",
      "¬°El progreso se siente bien! ‚ú®",
      "¬°Sigues avanzando! üéØ",
      "¬°Cada d√≠a es una oportunidad! üåÖ",
      "¬°Mant√©n el ritmo! üèÉ‚Äç‚ôÇÔ∏è"
    ]
  },
  // 41-60%: Mitad del camino
  '41-60': {
    color: 'from-yellow-400 to-green-400',
    bgColor: 'bg-yellow-50',
    borderColor: 'border-yellow-200',
    icon: Star,
    messages: [
      "¬°Ya est√°s a mitad de camino! üéØ",
      "¬°Excelente progreso! üåü",
      "¬°Sigues fuerte! üí™",
      "¬°La constancia es tu superpoder! ‚ö°",
      "¬°Vas por buen camino! üõ§Ô∏è"
    ]
  },
  // 61-80%: Casi terminando
  '61-80': {
    color: 'from-green-400 to-emerald-400',
    bgColor: 'bg-green-50',
    borderColor: 'border-green-200',
    icon: Award,
    messages: [
      "¬°Casi llegas a la meta! üèÜ",
      "¬°Incre√≠ble trabajo! üéâ",
      "¬°Est√°s muy cerca! üéØ",
      "¬°El final est√° a la vista! üëÄ",
      "¬°Sigue as√≠, eres un campe√≥n! üèÖ"
    ]
  },
  // 81-99%: Casi perfecto
  '81-99': {
    color: 'from-emerald-400 to-teal-400',
    bgColor: 'bg-emerald-50',
    borderColor: 'border-emerald-200',
    icon: Zap,
    messages: [
      "¬°Casi perfecto! ‚ö°",
      "¬°Est√°s a un paso de la excelencia! üåü",
      "¬°Incre√≠ble dedicaci√≥n! üíé",
      "¬°El √©xito est√° a tu alcance! üéØ",
      "¬°Eres un ejemplo a seguir! üëë"
    ]
  },
  // 100%: Perfecto
  '100': {
    color: 'from-teal-400 to-cyan-400',
    bgColor: 'bg-teal-50',
    borderColor: 'border-teal-200',
    icon: Award,
    messages: [
      "¬°PERFECTO! ¬°MISI√ìN CUMPLIDA! üéâ",
      "¬°100% COMPLETADO! ¬°ERES INCRE√çBLE! üèÜ",
      "¬°EXCELENCIA TOTAL! ¬°FELICITACIONES! ‚≠ê",
      "¬°OBJETIVO ALCANZADO! ¬°ERES UN MAESTRO! üëë",
      "¬°MES PERFECTO! ¬°INSPIRAS A OTROS! üåü"
    ]
  }
}

export default function MonthlyProgressBar({ paid, total, className = '' }: MonthlyProgressBarProps) {
  const [progress, setProgress] = useState(0)
  const [selectedMessage, setSelectedMessage] = useState('')
  const [isAnimating, setIsAnimating] = useState(false)

  // Calcular porcentaje de progreso
  const percentage = total > 0 ? Math.round((paid / total) * 100) : 0

  // Determinar el rango de progreso
  const getProgressRange = (percent: number) => {
    if (percent === 100) return '100'
    if (percent >= 81) return '81-99'
    if (percent >= 61) return '61-80'
    if (percent >= 41) return '41-60'
    if (percent >= 21) return '21-40'
    return '0-20'
  }

  const range = getProgressRange(percentage)
  const rangeConfig = PROGRESS_RANGES[range as keyof typeof PROGRESS_RANGES]
  const IconComponent = rangeConfig.icon

  // Seleccionar mensaje aleatorio
  useEffect(() => {
    const messages = rangeConfig.messages
    const randomIndex = Math.floor(Math.random() * messages.length)
    setSelectedMessage(messages[randomIndex])
  }, [percentage])

  // Animaci√≥n de progreso
  useEffect(() => {
    setIsAnimating(true)
    const timer = setTimeout(() => {
      setProgress(percentage)
      setIsAnimating(false)
    }, 100)
    return () => clearTimeout(timer)
  }, [percentage])

  return (
    <div className={`bg-white rounded-xl shadow-sm border ${rangeConfig.borderColor} p-6 ${className}`}>
      {/* Header con icono y t√≠tulo */}
      <div className="flex items-center justify-between mb-4">
        <div className="flex items-center space-x-3">
          <div className={`p-2 rounded-lg ${rangeConfig.bgColor}`}>
            <IconComponent className={`h-5 w-5 bg-gradient-to-r ${rangeConfig.color} bg-clip-text text-transparent`} />
          </div>
          <div>
            <h3 className="text-lg font-semibold text-gray-900">Progreso del Mes</h3>
            <p className="text-sm text-gray-600">
              {formatCurrency(paid)} de {formatCurrency(total)} pagados
            </p>
          </div>
        </div>
        <div className="text-right">
          <div className={`text-2xl font-bold bg-gradient-to-r ${rangeConfig.color} bg-clip-text text-transparent`}>
            {percentage}%
          </div>
          <div className="text-xs text-gray-500">completado</div>
        </div>
      </div>

      {/* Barra de progreso */}
      <div className="mb-4">
        <div className="relative">
          {/* Barra de fondo */}
          <div className="w-full h-3 bg-gray-200 rounded-full overflow-hidden">
            {/* Barra de progreso animada */}
            <div
              className={`h-full bg-gradient-to-r ${rangeConfig.color} rounded-full transition-all duration-1000 ease-out ${
                isAnimating ? 'animate-pulse' : ''
              }`}
              style={{ width: `${progress}%` }}
            >
              {/* Efecto de brillo */}
              <div className="h-full w-full bg-gradient-to-r from-white/20 to-transparent rounded-full"></div>
            </div>
          </div>
          
          {/* Indicador de progreso flotante */}
          {progress > 0 && (
            <div
              className="absolute -top-8 transform -translate-x-1/2 transition-all duration-1000 ease-out"
              style={{ left: `${Math.min(progress, 95)}%` }}
            >
              <div className={`bg-gradient-to-r ${rangeConfig.color} text-white text-xs px-2 py-1 rounded-md shadow-lg`}>
                {progress}%
              </div>
              <div className="w-0 h-0 border-l-4 border-r-4 border-t-4 border-transparent border-t-current mx-auto"></div>
            </div>
          )}
        </div>
      </div>

      {/* Mensaje motivacional */}
      <div className={`text-center p-3 rounded-lg ${rangeConfig.bgColor} border ${rangeConfig.borderColor}`}>
        <p className={`text-sm font-medium bg-gradient-to-r ${rangeConfig.color} bg-clip-text text-transparent`}>
          {selectedMessage}
        </p>
      </div>

      {/* Informaci√≥n adicional */}
      <div className="mt-4 grid grid-cols-2 gap-4 text-center">
        <div className="p-3 bg-gray-50 rounded-lg">
          <div className="text-lg font-bold text-gray-900">{formatCurrency(paid)}</div>
          <div className="text-xs text-gray-600">Pagado</div>
        </div>
        <div className="p-3 bg-gray-50 rounded-lg">
          <div className="text-lg font-bold text-gray-900">{formatCurrency(total - paid)}</div>
          <div className="text-xs text-gray-600">Pendiente</div>
        </div>
      </div>
    </div>
  )
}

// Funci√≥n auxiliar para formatear moneda
function formatCurrency(value: number): string {
  return new Intl.NumberFormat('es-CO', {
    style: 'currency',
    currency: 'COP',
    minimumFractionDigits: 0,
    maximumFractionDigits: 0
  }).format(Math.round(value))
} 